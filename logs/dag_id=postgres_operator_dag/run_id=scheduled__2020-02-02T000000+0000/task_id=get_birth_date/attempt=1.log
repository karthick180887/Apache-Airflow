{"timestamp":"2025-07-25T01:04:00.118656","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-25T01:04:00.119715","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/demo.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-25T01:04:00.189765","level":"info","event":"Executing: SELECT * FROM pet WHERE birth_date BETWEEN SYMMETRIC %(begin_date)s AND %(end_date)s","logger":"airflow.task.operators.airflow.providers.common.sql.operators.sql.SQLExecuteQueryOperator"}
{"timestamp":"2025-07-25T01:04:00.192109","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-07-25T01:04:00.233869","level":"info","event":"Connection Retrieved 'postgres'","logger":"airflow.hooks.base"}
{"timestamp":"2025-07-25T01:04:00.238697","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-07-25T01:04:00.250813","level":"info","event":"Connection Retrieved 'postgres'","logger":"airflow.hooks.base"}
{"timestamp":"2025-07-25T01:04:00.258197","level":"info","event":"Running statement: SELECT * FROM pet WHERE birth_date BETWEEN SYMMETRIC %(begin_date)s AND %(end_date)s, parameters: {'begin_date': '2020-01-01', 'end_date': '2020-12-31'}","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-07-25T01:04:00.260783","level":"info","event":"Rows affected: 2","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-07-25T01:04:00.261915","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01983f1b-abd5-78b3-b4fb-b7daa9f56f72'), task_id='get_birth_date', dag_id='postgres_operator_dag', run_id='scheduled__2020-02-02T00:00:00+00:00', try_number=1, map_index=-1, hostname='620d5c73f853', context_carrier=None, task=<Task(SQLExecuteQueryOperator): get_birth_date>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 7, 25, 1, 4, 0, 7958, tzinfo=TzInfo(UTC)), end_date=None, is_mapped=False)","logger":"task"}
